# Copyright (c) 2024–2025 Yifei Liu
# Copyright (c) 2024–2025 Geoff Kuenning 
# Copyright (c) 2024–2025 Md. Kamal Parvez
# Copyright (c) 2024–2025 Scott Smolka
# Copyright (c) 2024–2025 Erez Zadok
# Copyright (c) 2024–2025 Stony Brook University
# Copyright (c) 2024–2025 The Research Foundation of SUNY
#
# This software is released under the Apache License, Version 2.0.
# You may obtain a copy of the License at:
#     http://www.apache.org/licenses/LICENSE-2.0
#
# This work is associated with the paper:
# "Enhanced File System Testing through Input and Output Coverage,"
# published in the Proceedings of the ACM SYSTOR 2025.



KERNEL_VERSION := $(shell uname -r)

GCC = gcc
GPP = g++
DEBUG_FLAGS += -g -DDEBUG
GOPTS = -std=c++11
GOTPSSO = -shared -fPIC

BUILD_DIR = $(CURDIR)/../build
TESTING := testing/log_on_off testing/test_get_log_ent_size

MODULES = cow_brd disk_wrapper
obj-m := $(addsuffix .o, $(MODULES))
KDIR := /lib/modules/$(KERNEL_VERSION)/build

# Some Makefile magic to get the right include for xattr depending on kernel
# version. To avoid including kernel headers in user test cases, we don't want
# to compare against the KERNEL_VERSION macro. Thanks to some random SO post for
# how to compare the kernel version.
KERNEL_MAJ := $(shell echo $(KERNEL_VERSION) | cut -f1 -d.)
KERNEL_MIN := $(shell echo $(KERNEL_VERSION) | cut -f2 -d.)
XATTR_DEF_FLAG :=
ifeq ($(shell [ $(KERNEL_MAJ) -gt 4 -o \
	\( $(KERNEL_MAJ) -eq 4 -a $(KERNEL_MIN) -ge 15 \) ] && echo true), true)
XATTR_DEF_FLAG := -DNEW_XATTR_INC
endif

# Names of tests containing calls to fallocate with the zero range flag.
FALLOC_ZERO_RANGE_TESTS = \
	bug2_f2fs_fzero_fdatasync.cpp \
	bug1_btrfs_falloc_fsync.cpp \
	generic_042_fzero.cpp \
	generic_042_fzero_keep_size.cpp \
	generic_042_fzero_unaligned.cpp \
	generic_042_fzero_keep_size_unaligned.cpp

# Exclude the fallocate zero range tests on kernels < 3.15 since the call
# doesn't exist in those kernels.
FALLOC_EXCLUDE :=
ifeq ($(shell [ $(KERNEL_MAJ) -lt 3 -o \
	\( $(KERNEL_MAJ) -eq 3 -a $(KERNEL_MIN) -lt 15 \) ] && echo true), true)
FALLOC_EXCLUDE := $(FALLOC_ZERO_RANGE_TESTS)
endif

# Used to pick the proper delay time for waiting for bios based on the kernel
# version in use.
DELAY_DEFINE := 
ifeq ($(shell [ $(KERNEL_MAJ) -eq 3 -a $(KERNEL_MIN) -eq 13 ] && echo true), true)
DELAY_DEFINE := -DTHREE_THIRTEEN
endif
ifeq ($(shell [ $(KERNEL_MAJ) -eq 4 -a $(KERNEL_MIN) -eq 4 ] && echo true), true)
DELAY_DEFINE := -DFOUR_FOUR
endif
ifeq ($(shell [ $(KERNEL_MAJ) -eq 4 -a $(KERNEL_MIN) -eq 15 ] && echo true), true)
DELAY_DEFINE := -DFOUR_FIFTEEN
endif
ifeq ($(shell [ $(KERNEL_MAJ) -eq 4 -a $(KERNEL_MIN) -eq 16 ] && echo true), true)
DELAY_DEFINE := -DFOUR_SIXTEEN
endif
ifeq ($(shell [ $(KERNEL_MAJ) -eq 6 -a $(KERNEL_MIN) -eq 12 ] && echo true), true)
DELAY_DEFINE := -DSIX_TWELVE
endif
ifndef CM
DELAY_DEFINE := -DTWO_SEC
endif

CM_GEN_042_EXCLUDE = generic_042_base.cpp
CM_GEN_042 = \
		$(patsubst %.cpp, %.so, \
			$(filter-out $(CM_GEN_042_EXCLUDE), \
				$(filter-out $(FALLOC_EXCLUDE), \
					$(notdir $(wildcard $(CURDIR)/tests/generic_042/*.cpp)))))
CM_GEN_042_OUT = \
		$(foreach TEST, $(CM_GEN_042), \
			$(BUILD_DIR)/tests/generic_042/$(TEST))


CM_SEQ1_EXCLUDE = base.cpp
CM_SEQ1 = \
		$(patsubst %.cpp, %.so, \
			$(filter-out $(CM_SEQ1_EXCLUDE), \
					$(notdir $(wildcard $(CURDIR)/tests/seq1/*.cpp))))
CM_SEQ1_OUT = \
		$(foreach TEST, $(CM_SEQ1), \
			$(BUILD_DIR)/tests/seq1/$(TEST))


# CM_GEN_EXCLUDE = base.cpp
# CM_GEN = \
# 		$(patsubst %.cpp, %.so, \
# 			$(filter-out $(CM_GEN_EXCLUDE), \
# 					$(notdir $(wildcard $(CURDIR)/tests/generated_workloads/*.cpp))))
#j-lang41480

# CM_GEN := $(shell \
# 	find $(CURDIR)/tests/generated_workloads -maxdepth 1 -name 'j-lang41480*.cpp' ! -name '$(subst $(space),' ! -name ', $(CM_GEN_EXCLUDE))' \
# 	| xargs -n1 basename \
# 	| sed 's/\.cpp$$/.so/')

# $(info >>> CM_GEN = $(CM_GEN))
# CM_GEN_OUT = \
# 		$(foreach TEST, $(CM_GEN), \
# 			$(BUILD_DIR)/tests/generated_workloads/$(TEST))


CM_TESTS_EXCLUDE = BaseTestCase.cpp
CM_TESTS = \
		$(patsubst %.cpp, %.so, \
			$(filter-out $(CM_TESTS_EXCLUDE), \
				$(filter-out $(FALLOC_EXCLUDE), \
					$(notdir $(wildcard $(CURDIR)/tests/*.cpp)))))

CM_PERMUTER_EXCLUDE = Permuter.cpp
CM_PERMUTERS = \
		$(patsubst %.cpp, %.so, \
			$(filter-out $(CM_PERMUTER_EXCLUDE), \
				$(notdir $(wildcard $(CURDIR)/permuter/*.cpp))))

.PHONY: all modules c_harness user_tool $(CM_TESTS) $(CM_PERMUTERS) clean

################################################################################
# Rules used as shorthand to build things.
################################################################################

all: \
		modules \
		c_harness \
		user_tools \
		tests \
		seq1 \
		permuters

modules: build-modules move-modules
build-modules: \
		$(foreach MOD, $(MODULES), $(addsuffix .c, $(MOD))) \
		$(BUILD_DIR)/Makefile
	$(MAKE) -C $(KDIR) M=$(CURDIR) src=$(CURDIR) modules

move-modules:
	@mkdir -p $(BUILD_DIR)
	mv -f *.ko $(BUILD_DIR)/
	
c_harness: \
		$(BUILD_DIR)/c_harness

user_tools: \
		$(BUILD_DIR)/user_tools/begin_log \
		$(BUILD_DIR)/user_tools/end_log \
		$(BUILD_DIR)/user_tools/begin_tests \
		$(BUILD_DIR)/user_tools/cm_checkpoint

tests: \
		$(foreach TEST, $(CM_TESTS), $(BUILD_DIR)/tests/$(TEST)) \
		$(CM_GEN_042_OUT) 

seq1: \
		$(CM_SEQ1_OUT)

CM_GEN_EXCLUDE = base.cpp
#j-lang41480
# # of parallel jobs (default to # of cores)
JOBS   ?= $(shell nproc)
COMMON_OBJS := \
    $(BUILD_DIR)/tests/BaseTestCase.o \
    $(BUILD_DIR)/user_tools/src/actions.o \
    $(BUILD_DIR)/user_tools/src/wrapper.o \
    $(BUILD_DIR)/user_tools/src/workload.o \
    $(BUILD_DIR)/utils/DiskMod.o \
    $(BUILD_DIR)/utils/communication/BaseSocket.o \
    $(BUILD_DIR)/utils/communication/ClientSocket.o \
    $(BUILD_DIR)/utils/communication/ClientCommandSender.o \
    $(BUILD_DIR)/results/DataTestResult.o

.PHONY: gentests
gentests:
	@mkdir -p $(BUILD_DIR)/tests/generated_workloads
	@find $(CURDIR)/tests/generated_workloads \
	     -maxdepth 1 -type f -name 'j-lang*.cpp' \
	     $(foreach ex,$(CM_GEN_EXCLUDE),-not -name '$(ex)') \
	     -print0 \
	| xargs -0 -n1 -P$(JOBS) -I{} sh -c '\
	    src="{}"; \
	    base="$$(basename "$$src" .cpp)"; \
	    out="$(BUILD_DIR)/tests/generated_workloads/$$base.so"; \
	    # echo "[Compiling] $$src → $$out"; \
	    $(GPP) $(GOPTS) $(GOTPSSO) $(XATTR_DEF_FLAG) \
	      -Wl,-soname,$$base.so -o "$$out" "$$src" $(COMMON_OBJS) \
	    || echo "[FAIL] $$src"; \
	  '

# your existing pattern rule still applies:
$(BUILD_DIR)/tests/generated_workloads/%.so: $(CURDIR)/tests/generated_workloads/%.cpp
	@mkdir -p $(dir $@)
	$(GPP) $(GOPTS) $(GOTPSSO) $(XATTR_DEF_FLAG) \
	  -Wl,-soname,$*.so \
	  -o $@ $< $(COMMON_OBJS)


permuters: \
		$(foreach PERMUTER, $(CM_PERMUTERS), $(BUILD_DIR)/permuter/$(PERMUTER))


################################################################################
# Rules that actually build things.
################################################################################

# Rule to make Makefile in build dir so that kbuild will build our modules into
# a new directory.
$(BUILD_DIR)/Makefile:
	mkdir -p $(BUILD_DIR)
	touch "$@"

$(BUILD_DIR)/harness/%.o: \
		harness/%.cpp
	mkdir -p $(@D)
	$(GPP) -std=c++11 $^ $(DELAY_DEFINE) -c -o $@

$(BUILD_DIR)/c_harness: \
	    	harness/DiskContents.cpp \
		harness/c_harness.cpp \
		harness/Tester.cpp \
		$(BUILD_DIR)/harness/FsSpecific.o \
		$(BUILD_DIR)/utils/utils.o \
		$(BUILD_DIR)/utils/DiskMod.o \
		$(BUILD_DIR)/utils/communication/ClientCommandSender.o \
		$(BUILD_DIR)/utils/communication/ClientSocket.o \
		$(BUILD_DIR)/utils/communication/ServerSocket.o \
		$(BUILD_DIR)/utils/communication/BaseSocket.o \
		$(BUILD_DIR)/permuter/Permuter.o \
		$(BUILD_DIR)/results/TestSuiteResult.o \
		$(BUILD_DIR)/results/SingleTestInfo.o \
		$(BUILD_DIR)/results/FileSystemTestResult.o \
		$(BUILD_DIR)/results/DataTestResult.o \
		$(BUILD_DIR)/results/PermuteTestResult.o \
		$(BUILD_DIR)/tests/BaseTestCase.o \
		$(BUILD_DIR)/user_tools/src/actions.o \
		$(BUILD_DIR)/user_tools/src/wrapper.o
	mkdir -p $(@D)
	$(GPP) $(GOPTS) $^ -ldl -o $@

$(BUILD_DIR)/tests/generic_042/%.o: %.cpp
	mkdir -p $(@D)
	$(GPP) $(GOPTS) -fPIC -c -o $@ $<


$(BUILD_DIR)/tests/seq1/%.o: %.cpp
	mkdir -p $(@D)
	$(GPP) $(GOPTS) -fPIC -c -o $@ $<


$(BUILD_DIR)/tests/generated_workloads/%.o: %.cpp
	mkdir -p $(@D)
	$(GPP) $(GOPTS) -fPIC -c -o $@ $<


# For static pattern rules like the one below, the pattern and prereqs must be
# separated by ' :' including the space!
$(CM_GEN_042_OUT): $(BUILD_DIR)/tests/generic_042/%.so : \
		tests/generic_042/%.cpp \
		$(BUILD_DIR)/tests/BaseTestCase.o \
		$(BUILD_DIR)/tests/generic_042/generic_042_base.o \
		$(BUILD_DIR)/user_tools/src/actions.o \
		$(BUILD_DIR)/user_tools/src/wrapper.o \
		$(BUILD_DIR)/user_tools/src/workload.o \
		$(BUILD_DIR)/utils/DiskMod.o \
		$(BUILD_DIR)/utils/communication/BaseSocket.o \
		$(BUILD_DIR)/utils/communication/ClientSocket.o \
		$(BUILD_DIR)/utils/communication/ClientCommandSender.o \
		$(BUILD_DIR)/results/DataTestResult.o
	mkdir -p $(@D)
	$(GPP) $(GOPTS) $(GOTPSSO) $(XATTR_DEF_FLAG) -Wl,-soname,$(notdir $@) \
		-o $@ $^


$(CM_SEQ1_OUT): $(BUILD_DIR)/tests/seq1/%.so : \
		tests/seq1/%.cpp \
		$(BUILD_DIR)/tests/BaseTestCase.o \
		$(BUILD_DIR)/user_tools/src/actions.o \
		$(BUILD_DIR)/user_tools/src/wrapper.o \
		$(BUILD_DIR)/user_tools/src/workload.o \
		$(BUILD_DIR)/utils/DiskMod.o \
		$(BUILD_DIR)/utils/communication/BaseSocket.o \
		$(BUILD_DIR)/utils/communication/ClientSocket.o \
		$(BUILD_DIR)/utils/communication/ClientCommandSender.o \
		$(BUILD_DIR)/results/DataTestResult.o
	mkdir -p $(@D)
	$(GPP) $(GOPTS) $(GOTPSSO) $(XATTR_DEF_FLAG) -Wl,-soname,$(notdir $@) \
		-o $@ $^

# $(info >>> CM_GEN_OUT = $(CM_GEN_OUT))
# $(CM_GEN_OUT): $(BUILD_DIR)/tests/generated_workloads/%.so : \
# 		tests/generated_workloads/%.cpp \
# 		$(BUILD_DIR)/tests/BaseTestCase.o \
# 		$(BUILD_DIR)/user_tools/src/actions.o \
# 		$(BUILD_DIR)/user_tools/src/wrapper.o \
# 		$(BUILD_DIR)/user_tools/src/workload.o \
# 		$(BUILD_DIR)/utils/DiskMod.o \
# 		$(BUILD_DIR)/utils/communication/BaseSocket.o \
# 		$(BUILD_DIR)/utils/communication/ClientSocket.o \
# 		$(BUILD_DIR)/utils/communication/ClientCommandSender.o \
# 		$(BUILD_DIR)/results/DataTestResult.o
# 	mkdir -p $(@D)
# 	$(GPP) $(GOPTS) $(GOTPSSO) $(XATTR_DEF_FLAG) -Wl,-soname,$(notdir $@) \
# 		-o $@ $^


$(BUILD_DIR)/tests/%.so: \
		tests/%.cpp \
		$(BUILD_DIR)/tests/BaseTestCase.o \
		$(BUILD_DIR)/user_tools/src/actions.o \
		$(BUILD_DIR)/user_tools/src/workload.o \
		$(BUILD_DIR)/user_tools/src/wrapper.o \
		$(BUILD_DIR)/utils/DiskMod.o \
		$(BUILD_DIR)/utils/communication/BaseSocket.o \
		$(BUILD_DIR)/utils/communication/ClientSocket.o \
		$(BUILD_DIR)/utils/communication/ClientCommandSender.o \
		$(BUILD_DIR)/results/DataTestResult.o
	mkdir -p $(@D)
	$(GPP) $(GOPTS) $(GOTPSSO) $(XATTR_DEF_FLAG) -Wl,-soname,$(notdir $@) \
		-o $@ $^

$(BUILD_DIR)/tests/%.o: \
		tests/%.cpp
	mkdir -p $(@D)
	$(GPP) $(GOPTS) -fPIC -c -o $@ $<

$(BUILD_DIR)/results/%.o: \
		results/%.cpp
	mkdir -p $(@D)
	$(GPP) $(GOPTS) -fPIC -c -o $@ $<

$(BUILD_DIR)/permuter/Permuter.o: \
		permuter/Permuter.cpp
	mkdir -p $(@D)
	$(GPP) $(GOPTS) -fPIC -c -o $@ $<

$(BUILD_DIR)/permuter/%.so: \
		permuter/%.cpp \
		$(BUILD_DIR)/permuter/Permuter.o \
		$(BUILD_DIR)/utils/utils.o
	mkdir -p $(@D)
	$(GPP) $(GOPTS) $(GOTPSSO) -Wl,-soname,RandomPermuter.so \
		-o $@ $^

$(BUILD_DIR)/utils/%.o: \
		utils/%.cpp
	mkdir -p $(@D)
	$(GPP) $(GOPTS) -fPIC -c -o $@ $<

$(BUILD_DIR)/user_tools/%: \
		user_tools/%.cpp \
		$(BUILD_DIR)/user_tools/src/actions.o \
		$(BUILD_DIR)/utils/communication/BaseSocket.o \
		$(BUILD_DIR)/utils/communication/ClientSocket.o \
		$(BUILD_DIR)/utils/communication/ClientCommandSender.o
	mkdir -p $(@D)
	$(GPP) $(GOPTS) -o $@ $^

$(BUILD_DIR)/user_tools/src/%.o: \
		user_tools/src/%.cpp
	mkdir -p $(@D)
	$(GPP) -c $(GOPTS) -fPIC -o $@ $<

# kbuild complains if the Makefile isn't in the build dir too.
clean: $(BUILD_DIR)/Makefile
	$(MAKE) -C $(KDIR) M=$(BUILD_DIR) clean
	rm -f $(TESTING) ioctl_test
